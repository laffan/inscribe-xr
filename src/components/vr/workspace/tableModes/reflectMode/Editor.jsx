/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 editor.glb --keepgroups --keepnames
*/

import React, { useState } from "react";
import { useGLTF } from "@react-three/drei";
import { Interactive } from "@react-three/xr";
import { Howl } from "howler";
import { useStoreActions } from "easy-peasy"

const hoverSound = new Howl({
  src: ["/assets/audio/effects/hover2.mp3"],
});

const clickSound = new Howl({
  src: ["/assets/audio/effects/click.mp3"],
});

export function Model(props) {
  const [confirmModal, setConfirmModal] = useState(false);
  const [btnFinishHover, setBtnFinishHover] = useState(false);
  const [btnConfirmHover, setBtnConfirmHover] = useState(false);
  const [btnDeleteHover, setBtnDeleteHover] = useState(false);

  const finishCurrentReflection =  useStoreActions((state) => state.reflections.finishCurrentReflection);
  const deleteCurrentReflection =  useStoreActions((state) => state.reflections.deleteCurrentReflection);


  const { nodes, materials } = useGLTF("/assets/models/table/editor.glb");
  return (
    <group {...props} dispose={null}>
      <group name="Scene">
        {confirmModal && (
          <group name="confirmModal">
            <mesh
              name="modalBackground"
              geometry={nodes.modalBackground.geometry}
              material={materials.backgroundMat}
              position={[0, 0.68, 0.03]}
            />
            <mesh
              name="modalBackgroundDark"
              geometry={nodes.modalBackgroundDark.geometry}
              material={materials.modalBackgroundDarkMat}
              position={[0, 0.68, 0.02]}
            />
            <mesh
              name="Text"
              geometry={nodes.Text.geometry}
              material={materials.textMat}
              position={[-0.01, 0.73, 0.04]}
              rotation={[Math.PI / 2, 0, 0]}
              scale={0.07}
            />

            <Interactive
              onHover={() => {
                setBtnConfirmHover(true);
                hoverSound.play();
              }}
              onBlur={() => {
                setBtnConfirmHover(false);
              }}
              onSelect={() => {
                finishCurrentReflection();
                clickSound.play();
              }}
            >
              <mesh
                name="btnConfirmSave"
                geometry={
                  btnConfirmHover
                    ? nodes.btnSaveHover.geometry
                    : nodes.btnSave.geometry
                }
                material={materials.btnTexture}
                position={[-0.1, 0.61, 0.03]}
              />
            </Interactive>

            <Interactive
              onHover={() => {
                setBtnDeleteHover(true);
                hoverSound.play();
              }}
              onBlur={() => {
                setBtnDeleteHover(false);
              }}
              onSelect={() => {
                clickSound.play();
              }}
            >
              <mesh
                name="btnConfirmDelete"
                geometry={
                  btnDeleteHover
                    ? nodes.btnDeleteHover.geometry
                    : nodes.btnDelete.geometry
                }
                material={materials.btnTexture}
                position={[0.07, 0.61, 0.03]}
              />
            </Interactive>
          </group>
        )}

        <Interactive
          onHover={() => {
            setBtnFinishHover(true);
            hoverSound.play();
          }}
          onBlur={() => {
            setBtnFinishHover(false);
          }}
          onSelect={() => {
            setConfirmModal(!confirmModal);
            clickSound.play();
          }}
        >
          <mesh
            name="btnFinish"
            geometry={
              confirmModal
                ? btnFinishHover
                  ? nodes.btnCancelHover.geometry
                  : nodes.btnCancel.geometry
                : btnFinishHover
                ? nodes.btnConfirmHover.geometry
                : nodes.btnFinish.geometry
            }
            material={materials.btnTexture}
            position={[0.46, 0.07, 0]}
          />
        </Interactive>

        <mesh
          name="background"
          geometry={nodes.background.geometry}
          material={materials.backgroundMat}
          position={[0, 0.64, 0]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/assets/models/table/editor.glb");
